# Generated by Django 4.2.7 on 2024-01-22 16:33

import apps.accounts.models.managers
import apps.accounts.models.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "email",
                    models.EmailField(
                        max_length=254,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                        verbose_name="email address",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        validators=[apps.accounts.models.validators.NameRegexValidator()],
                        verbose_name="first name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        validators=[apps.accounts.models.validators.NameRegexValidator()],
                        verbose_name="last name",
                    ),
                ),
                ("phone_number", models.IntegerField(blank=True, null=True, verbose_name="phone_number")),
                ("state", models.CharField(blank=True, max_length=50, null=True, verbose_name="state")),
                ("city", models.CharField(blank=True, max_length=50, null=True, verbose_name="city")),
                ("street", models.CharField(blank=True, max_length=50, null=True, verbose_name="street")),
                ("zipcode", models.IntegerField(blank=True, null=True, verbose_name="zipcode")),
                ("identification", models.IntegerField(blank=True, null=True, verbose_name="identification")),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[("student", "Student"), ("teacher", "Teacher"), ("admin", "Admin")],
                        default="admin",
                        max_length=50,
                        verbose_name="user type",
                    ),
                ),
                ("is_verified", models.BooleanField(default=False, verbose_name="verified")),
                ("is_password_changed", models.BooleanField(default=False, verbose_name="is_password_changed")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", apps.accounts.models.managers.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Admin",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("accounts.user",),
            managers=[
                ("objects", apps.accounts.models.managers.ProxyUserManger("admin")),
            ],
        ),
        migrations.CreateModel(
            name="Student",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("accounts.user",),
            managers=[
                ("objects", apps.accounts.models.managers.ProxyUserManger("student")),
            ],
        ),
        migrations.CreateModel(
            name="Teacher",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("accounts.user",),
            managers=[
                ("objects", apps.accounts.models.managers.ProxyUserManger("teacher")),
            ],
        ),
        migrations.CreateModel(
            name="TeacherProfile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("num_courses", models.IntegerField(default=0)),
                ("is_idle", models.BooleanField(default=False)),
                (
                    "teacher",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_profile",
                        to="accounts.teacher",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StudentProfile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("study_hours", models.IntegerField(default=0)),
                (
                    "student",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_profile",
                        to="accounts.student",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AdminProfile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("section", models.CharField(max_length=50, verbose_name="section")),
                (
                    "admin",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="admin_profile",
                        to="accounts.admin",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="user",
            name="manager",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="accounts.admin"
            ),
        ),
    ]
