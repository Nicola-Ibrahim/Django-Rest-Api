######################
# builder-dev  STAGE #
######################
# it is responsible for installing poetry, your project dependencies, and building wheels

# For more information, please refer to https://aka.ms/vscode-docker-python
# Use python:3.11-buster as the builder image
FROM python:3.11-buster AS builder-dev

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PYTHONUNBUFFERED=1 \
    POETRY_VERSION=1.5.1

# Set the PYTHONPATH environment variable to the current directory
ENV PYTHONPATH .

# Install dependencies
RUN set -xe \
    # Update the package list
    && apt-get update \
    # Install build-essential for compiling C extensions 'libpq-dev'
    && apt-get install -y --no-install-recommends build-essential netcat\
    # Install virtualenvwrapper and poetry with pip
    && pip install virtualenvwrapper "poetry==$POETRY_VERSION" \
    # Clean up the cache and temporary files
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

COPY ["poetry.lock", "pyproject.toml", "./"]

# Install project dependencies without installing the project itself
RUN poetry install --no-root --no-interaction --no-ansi \
    # Export the requirements.txt file from poetry
    && poetry export --without-hashes --with dev --with test -f requirements.txt --output requirements.txt \
    # Build the wheels for the project and its dependencies
    && pip wheel -r requirements.txt --wheel-dir /wheels

# Set the working directory in the container to /backend
WORKDIR /backend

# Copy the current directory contents into the container at /backend
COPY . /backend


###############
# FINAL STAGE #
###############
# it is responsible for copying the source code and the wheels from the builder stage and installing them with pip

FROM python:3.11-buster

# Set working directory
WORKDIR /backend

# Copy source code from builder stage
COPY --from=builder-dev /backend /backend

# Copy wheels from builder stage
COPY --from=builder-dev /wheels /wheels

# Install wheels from /wheels directory
RUN pip install --no-cache-dir --no-index --find-links=/wheels /wheels/*.whl

# Set up the entrypoint script for running commands before starting the web server
COPY ./scripts/entrypoint.sh /entrypoint.sh

# Make the entrypoint script executable
RUN chmod +x /entrypoint.sh

# Run the entrypoint script as the default command when starting the container
ENTRYPOINT ["/entrypoint.sh"]
